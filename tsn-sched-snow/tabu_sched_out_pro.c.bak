#include "tabu_sched.h"

extern struct sched_set tsn_sched_set;
extern struct global_resource g_resource;
static int loop_num = 0;

static struct tabu_table tabu_tbl = {0};
static struct tabu_sched_solution candidate_set[CANDIDATE_NUM] = {0};
static struct tabu_sched_solution init_solution = {0};
static struct tabu_sched_solution best_so_far = {0};
static struct tabu_sched_solution cur_solution = {0};

int insert_flow_with_adjust_offset_descend(struct sched_info *sched, struct global_resource *resource)
{
    int i = 0, j = 0;
    u8 src_node = sched->src_sw_id;
    u16 node = 0;
    u16 slot = 0;
    int offset = 0;
    u16 latency = 0;
    
    for(offset = sched->period_slot - 1; offset >= 0; offset--)
    {
        latency = offset + sched->path_len + 1;
        if(latency <= sched->deadline_slot)
        {
            sched->flag = SUCCESS;
            for(i = 0; i < sched->path_len; i++)
            {
                node = (src_node + i) % NODE_NUM;
                for(j = 0; j < (resource->cur_sched_slot_num / sched->period_slot); j++)
                {
                    slot = (offset + j * sched->period_slot + i + 1) % resource->cur_sched_slot_num;
                    if(resource->cqf[node][slot].free_len < sched->pkt_num)
                    {
                        sched->flag = FAIL;
                        break;
                    }
                }
                if(sched->flag == FAIL)
                    break;
            }
            if(sched->flag == SUCCESS)
            {
                sched->offset = offset;
                for(i = 0; i < sched->path_len; i++)
                {
                    node = (src_node + i) % NODE_NUM;
                    for(j = 0; j < (resource->cur_sched_slot_num / sched->period_slot); j++)
                    {
                        slot = (offset + j * sched->period_slot + i + 1) % resource->cur_sched_slot_num;
                        resource->cqf[node][slot].free_len -= sched->pkt_num;
                        resource->cqf[node][slot].used_len += sched->pkt_num;
                    }
                }
 
/*                printf("FLOW:%d is scheduled successfully! OFFSET:%d, PATH INFO:", sched.flow_id, sched.offset);
                for(i = 0; i < sched.path_len - 1; i++)
                {
                    printf("SW:[%d]->", (sched.src_sw_id + i) % NODE_NUM);
                }
                printf("SW:[%d]\n", sched.dst_sw_id);
               sched_num++;
*/                break;
            }
        }
    }
/*    if(sched.flag == FAIL)
    {
        printf("flow_id: %d, offset: %d, latency: %d, deadline: %d!\n", sched.flow_id, offset, latency, sched.deadline_slot);
    }
*/
}

/*计算流密度：路径上最大最小值之差*/
u32 compute_flow_density_path_diff(struct sched_info sched, u16 offset, struct global_resource resource)
{
    int i = 0, j = 0;
    u8 src_node = sched.src_sw_id;
    u16 node = 0;
    u16 slot = 0;
    u32 max_size = 0;
    u32 min_size = 0xFFFFFFFF;

    for(i = 0; i < sched.path_len; i++)
    {
        node = (src_node + i) % NODE_NUM;
        for(j = 0; j < (resource.cur_sched_slot_num / sched.period_slot); j++)
        {
            slot = (offset + j * sched.period_slot + i + 1) % resource.cur_sched_slot_num;
            resource.cqf[node][slot].free_len -= sched.pkt_num;
            resource.cqf[node][slot].used_len += sched.pkt_num;
        }
    }

    for(i = 0; i < sched.path_len; i++)
    {
        node = (src_node + i) % NODE_NUM;
        for(j = 0; j < resource.cur_sched_slot_num; j++)
        {
            if(resource.cqf[node][j].used_len > 0)
            {
                if(resource.cqf[node][j].used_len > max_size)
                    max_size = resource.cqf[node][j].used_len;
                if(resource.cqf[node][j].used_len < min_size)
                    min_size = resource.cqf[node][j].used_len;
            }
        }
    }

    return max_size - min_size;
}

/*计算流密度：路径上方差*/
u32 compute_flow_density_path_variance(struct sched_info sched, u16 offset, struct global_resource resource)
{
    int i = 0, j = 0;
    u8 src_node = sched.src_sw_id;
    u16 node = 0;
    u16 slot = 0;
    u32 used_slot_num = 0;
    u64 total_pkt_num = 0;
    float average = 0;
    float density = 0;

    for(i = 0; i < sched.path_len; i++)
    {
        node = (src_node + i) % NODE_NUM;
        for(j = 0; j < (resource.cur_sched_slot_num / sched.period_slot); j++)
        {
            slot = (offset + j * sched.period_slot + i + 1) % resource.cur_sched_slot_num;
            resource.cqf[node][slot].free_len -= sched.pkt_num;
            resource.cqf[node][slot].used_len += sched.pkt_num;
        }
    }

    for(i = 0; i < sched.path_len; i++)
    {
        node = (src_node + i) % NODE_NUM;
        for(j = 0; j < resource.cur_sched_slot_num; j++)
        {
            total_pkt_num += resource.cqf[node][j].used_len;
            used_slot_num++;
        }
    }

    average = (float)total_pkt_num / used_slot_num;
    for(i = 0; i < NODE_NUM; i++)
    {
        node = (src_node + i) % NODE_NUM;
        for(j = 0; j < resource.cur_sched_slot_num; j++)
        {
            density += ((float)resource.cqf[node][j].used_len - average) * \
                        ((float)resource.cqf[node][j].used_len - average);
        }
    }
    density = density / used_slot_num;
//   density = sqrt(density);
//    printf("flow: %d, offset: %d, density: %f\n", sched.flow_id, offset, density);
    return (u32)density;
}


int insert_flow_with_adjust_offset_density(struct sched_info *sched, struct global_resource *resource)
{
    int i = 0, j = 0;
    u8 src_node = sched->src_sw_id;
    u16 node = 0;
    u16 slot = 0;
    int offset = 0;
    u16 latency = 0;
    u32 new_density = 0;

    sched->density = 0xFFFFFFFF;
    sched->flag = FAIL;
    for(offset = 0; offset < sched->period_slot; offset++)
    {
        latency = offset + sched->path_len + 1;
        if(latency <= sched->deadline_slot)
        {
            sched->flag = SUCCESS;
            for(i = 0; i < sched->path_len; i++)
            {
                node = (src_node + i) % NODE_NUM;
                for(j = 0; j < (resource->cur_sched_slot_num / sched->period_slot); j++)
                {
                    slot = (offset + j * sched->period_slot + i + 1) % resource->cur_sched_slot_num;
                    if(resource->cqf[node][slot].free_len < sched->pkt_num)
                    {
                        sched->flag = FAIL;
                        break;
                    }
                }
                if(sched->flag == FAIL)
                    break;
            }
            if(sched->flag == SUCCESS)
            {
                new_density = compute_flow_density_path_variance(*sched, offset, *resource);
//                new_density = compute_flow_density_path_diff(*sched, offset, *resource);
                if(new_density <= sched->density)
                {
//                    printf("replace: flow: %d, old_density: %u, new_density: %u\n", sched.flow_id, sched.density, new_density);
                    sched->offset = offset;
                    sched->density = new_density;
                }
            }
        }
        else
        {
            break;
        }
    }

    if(sched->density != 0xFFFFFFFF)
    {
        sched->flag = SUCCESS;
        for(i = 0; i < sched->path_len; i++)
        {
            node = (src_node + i) % NODE_NUM;
            for(j = 0; j < (resource->cur_sched_slot_num / sched->period_slot); j++)
            {
                slot = (sched->offset + j * sched->period_slot + i + 1) % resource->cur_sched_slot_num;
                resource->cqf[node][slot].free_len -= sched->pkt_num;
                resource->cqf[node][slot].used_len += sched->pkt_num;
            }
        }
//        printf("flow: %d, offset: %d, SUCCESS!\n", sched.flow_id, sched.offset);
/*      printf("FLOW:%d is scheduled successfully! OFFSET:%d, PATH INFO:", sched.flow_id, sched.offset);
        for(i = 0; i < sched.path_len - 1; i++)
        {
            printf("SW:[%d]->", (sched.src_sw_id + i) % NODE_NUM);
        }
        printf("SW:[%d]\n", sched.dst_sw_id);
*/      
    }
    else
    {
        sched->flag == FAIL;
//      printf("flow_id: %d, offset: %d, latency: %d, deadline: %d!\n", sched.flow_id, offset, latency, sched.deadline_slot);
    }

}



/*产生初始解：贪心算法解作为初始解*/
static int generate_init_solution_pro() 
{
    int i = 0;
    memset(&init_solution, 0, sizeof(struct tabu_sched_solution));
    for(i = 0; i < tsn_sched_set.cur_flow_num; i++)
    {
        if(tsn_sched_set.sched[i].flag == SUCCESS)
        {
            init_solution.sched_suc[init_solution.cur_suc_num] = tsn_sched_set.sched[i];
            init_solution.cur_suc_num++;
        }
        else
        {
            init_solution.sched_fail[init_solution.cur_fail_num] = tsn_sched_set.sched[i];
            init_solution.cur_fail_num++;
        }
    }
    init_solution.g_resource = g_resource;
    best_so_far = init_solution;
    cur_solution = init_solution;
//    printf("init solution: %d\n", init_solution.cur_suc_num);
}


static void generate_candidate_set_pro()
{
    int i = 0, j = 0, k = 0, s = 0;
    int num = 0;
    int start = 0;
    struct sched_info temp = {0};
    u8 src_node  = 0;
    u16 node = 0;
    u16 slot = 0;
    u32 temp_num = 0;
    u32 exchange = 0;
    
#if 0
    for(num = 0; num < CANDIDATE_NUM; num++)
    {
        candidate_set[num] = cur_solution;
    }

    for(i = 0; i < candidate_set[0].cur_suc_num; i++)
    {
        for(j = 0; j < candidate_set[0].cur_suc_num - i - 1; j++)
        {
            if(candidate_set[0].sched_suc[j].pkt_num > candidate_set[0].sched_suc[j + 1].pkt_num)
            {
                temp = candidate_set[0].sched_suc[j];
                candidate_set[0].sched_suc[j] = candidate_set[0].sched_suc[j + 1];
                candidate_set[0].sched_suc[j + 1] = temp;
            }
        }
    }

    for(i = 0; i < candidate_set[1].cur_suc_num; i++)
    {
        for(j = 0; j < candidate_set[1].cur_suc_num - i - 1; j++)
        {
            if(candidate_set[1].sched_suc[j].period_slot < candidate_set[1].sched_suc[j + 1].period_slot)
            {
                temp = candidate_set[1].sched_suc[j];
                candidate_set[1].sched_suc[j] = candidate_set[1].sched_suc[j + 1];
                candidate_set[1].sched_suc[j + 1] = temp;
            }
        }
    }

    for(i = 0; i < candidate_set[2].cur_suc_num; i++)
    {
        for(j = 0; j < candidate_set[2].cur_suc_num - i - 1; j++)
        {
            if(candidate_set[2].sched_suc[j].deadline_slot < candidate_set[2].sched_suc[j + 1].deadline_slot)
            {
                temp = candidate_set[2].sched_suc[j];
                candidate_set[2].sched_suc[j] = candidate_set[2].sched_suc[j + 1];
                candidate_set[2].sched_suc[j + 1] = temp;
            }
        }
    }

    for(i = 0; i < candidate_set[3].cur_suc_num; i++)
    {
        for(j = 0; j < candidate_set[3].cur_suc_num - i - 1; j++)
        {
            if(candidate_set[3].sched_suc[j].path_len > candidate_set[3].sched_suc[j + 1].path_len)
            {
                temp = candidate_set[3].sched_suc[j];
                candidate_set[3].sched_suc[j] = candidate_set[3].sched_suc[j + 1];
                candidate_set[3].sched_suc[j + 1] = temp;
            }
        }
    }
#endif

    for(i = 0; i < cur_solution.cur_suc_num; i++)
    {
        for(j = 0; j < cur_solution.cur_suc_num - i - 1; j++)
        {
            if(cur_solution.sched_suc[j].pkt_num > cur_solution.sched_suc[j + 1].pkt_num)
//            if(cur_solution.sched_suc[j].period_slot < cur_solution.sched_suc[j + 1].period_slot)
//            if(cur_solution.sched_suc[j].deadline_slot < cur_solution.sched_suc[j + 1].deadline_slot)
//            if(cur_solution.sched_suc[j].path_len > cur_solution.sched_suc[j + 1].path_len)
            {
                temp = cur_solution.sched_suc[j];
                cur_solution.sched_suc[j] = cur_solution.sched_suc[j + 1];
                cur_solution.sched_suc[j + 1] = temp;
            }
        }
    }


    for(num = 0; num < CANDIDATE_NUM; num++)
    {
        candidate_set[num] = cur_solution;
        memset(&candidate_set[num].entry, 0, sizeof(struct tabu_entry));
        for(i = 0; i < STEP_SIZE; i++)
        {
            start = candidate_set[num].cur_suc_num - (num + 1) * STEP_SIZE + i;
            if(start < 0)
                start += candidate_set[num].cur_suc_num;
            candidate_set[num].entry.out[i] = candidate_set[num].sched_suc[start].flow_id;
//            printf("candidate: %d, out: %d\n", num, candidate_set[num].entry.out[i]);
            candidate_set[num].sched_suc[start].flag = FAIL;
            candidate_set[num].sched_fail[cur_solution.cur_fail_num + i] = candidate_set[num].sched_suc[start];
            src_node = candidate_set[num].sched_suc[start].src_sw_id;
            for(j = 0; j < candidate_set[num].sched_suc[start].path_len; j++)
            {
                node = (src_node + j) % NODE_NUM;
                for(k = 0; k < (candidate_set[num].g_resource.cur_sched_slot_num / candidate_set[num].sched_suc[start].period_slot); k++)
                {
                    slot = (candidate_set[num].sched_suc[start].offset + k * candidate_set[num].sched_suc[start].period_slot + j + 1) \
                           % candidate_set[num].g_resource.cur_sched_slot_num;
                    candidate_set[num].g_resource.cqf[node][slot].free_len += candidate_set[num].sched_suc[start].pkt_num;
                    candidate_set[num].g_resource.cqf[node][slot].used_len -= candidate_set[num].sched_suc[start].pkt_num;
                }
            }
        }

        for(i = start + 1; i < candidate_set[num].cur_suc_num; i++)
        {
            candidate_set[num].sched_suc[i - STEP_SIZE] = candidate_set[num].sched_suc[i];
        }
        
        candidate_set[num].cur_suc_num -= STEP_SIZE;
 
        candidate_set[num].cur_fail_num += STEP_SIZE;
 
        for(i = 0; i < candidate_set[num].cur_fail_num; i++)
        {
            for(j = 0; j < candidate_set[num].cur_fail_num - i - 1; j++)
            {
                if(candidate_set[num].sched_fail[j].pkt_num > candidate_set[num].sched_fail[j + 1].pkt_num)
                {
                    temp = candidate_set[num].sched_fail[j];
                    candidate_set[num].sched_fail[j] = candidate_set[num].sched_fail[j + 1];
                    candidate_set[num].sched_fail[j + 1] = temp;
                }
            }
        }
 
        /*对Flow_Fail集合中的流量进行排序*/
#if 0 
        if(num == 0)
        {
            for(i = 0; i < candidate_set[num].cur_fail_num; i++)
            {
                for(j = 0; j < candidate_set[num].cur_fail_num - i - 1; j++)
                {
                    if(candidate_set[num].sched_fail[j].pkt_num > candidate_set[num].sched_fail[j + 1].pkt_num)
                    {
                        temp = candidate_set[num].sched_fail[j];
                        candidate_set[num].sched_fail[j] = candidate_set[num].sched_fail[j + 1];
                        candidate_set[num].sched_fail[j + 1] = temp;
                    }
                }
            }
        }

        if(num == 1)
        {
            for(i = 0; i < candidate_set[num].cur_fail_num; i++)
            {
                for(j = 0; j < candidate_set[num].cur_fail_num - i - 1; j++)
                {
                    if(candidate_set[num].sched_fail[j].period_slot < candidate_set[num].sched_fail[j + 1].period_slot)
                    {
                        temp = candidate_set[num].sched_fail[j];
                        candidate_set[num].sched_fail[j] = candidate_set[num].sched_fail[j + 1];
                        candidate_set[num].sched_fail[j + 1] = temp;
                    }
                }
            }
        }

        if(num == 2)
        {
            for(i = 0; i < candidate_set[num].cur_fail_num; i++)
            {
                for(j = 0; j < candidate_set[num].cur_fail_num - i - 1; j++)
                {
                    if(candidate_set[num].sched_fail[j].deadline_slot < candidate_set[num].sched_fail[j + 1].deadline_slot)
                    {
                        temp = candidate_set[num].sched_fail[j];
                        candidate_set[num].sched_fail[j] = candidate_set[num].sched_fail[j + 1];
                        candidate_set[num].sched_fail[j + 1] = temp;
                    }
                }
            }
        }

        if(num == 3)
        {
            for(i = 0; i < candidate_set[num].cur_fail_num; i++)
            {
                for(j = 0; j < candidate_set[num].cur_fail_num - i - 1; j++)
                {
                    if(candidate_set[num].sched_fail[j].path_len > candidate_set[num].sched_fail[j + 1].path_len)
                    {
                        temp = candidate_set[num].sched_fail[j];
                        candidate_set[num].sched_fail[j] = candidate_set[num].sched_fail[j + 1];
                        candidate_set[num].sched_fail[j + 1] = temp;
                    }
                }
            }
        }
#endif
        for(i = 0; i < candidate_set[num].cur_fail_num; i++)
        {
            /*向F_SUCCESS中插入流*/
//            insert_flow_with_adjust_offset_descend(&candidate_set[num].sched_fail[i], &candidate_set[num].g_resource);
            insert_flow_with_adjust_offset_density(&candidate_set[num].sched_fail[i], &candidate_set[num].g_resource);
            if(candidate_set[num].sched_fail[i].flag == SUCCESS)
            {
                candidate_set[num].sched_suc[candidate_set[num].cur_suc_num] = candidate_set[num].sched_fail[i];
                candidate_set[num].cur_suc_num++;
//                printf("inn: %d, flow_id: %d\n", candidate_set[num].entry.in_num, candidate_set[num].sched_fail[i].flow_id);
                candidate_set[num].entry.inn[candidate_set[num].entry.in_num] = candidate_set[num].sched_fail[i].flow_id;
                candidate_set[num].entry.in_num++;
            }
        }
        
        j = 0;
        i = 0;

        temp_num = candidate_set[num].cur_fail_num;
        while(i < candidate_set[num].cur_fail_num)
        {
            if(candidate_set[num].sched_fail[i].flag == SUCCESS)
            {
                i++;
                temp_num--;
            }
            else
            {
                if(j < i)
                {
                    candidate_set[num].sched_fail[j] = candidate_set[num].sched_fail[i];
                }

                j++;
                i++;
            }
        }
        candidate_set[num].cur_fail_num = temp_num;
    }

}

int tabu_sched_out_pro()
{
    int i = 0, j = 0;
    int compare_flag = UNEQUAL;
    struct tabu_sched_solution cur_best_solution = {0};
    int repeat_num = 0;
    int hit_num = 0;
    int temp_tabu_tbl_num = 0;

    generate_init_solution_pro();
    while(loop_num < MAX_LOOP_NUM)
    {
//        printf("cur_solution.g_resource.sched_slot_num: %d\n", cur_solution.g_resource.cur_sched_slot_num);
        if(best_so_far.cur_suc_num == tsn_sched_set.cur_flow_num)
            break;
        
        generate_candidate_set_pro();
        memset(&cur_best_solution, 0, sizeof(struct tabu_sched_solution));
        for(i = 0; i < CANDIDATE_NUM; i++)
        {
            if(candidate_set[i].cur_suc_num >= cur_best_solution.cur_suc_num)
            {
                cur_best_solution = candidate_set[i];
            }
        }

        if(cur_best_solution.cur_suc_num >= best_so_far.cur_suc_num)
        {
            if(cur_best_solution.cur_suc_num == best_so_far.cur_suc_num)
            {
                repeat_num++;
                if(repeat_num >= MAX_REPEAT_NUM)
                    break;
            }
            else
                repeat_num = 0;

//            printf("start compare, tabu: %d\n", tabu_tbl.cur_num);
            for(i = 0; i < tabu_tbl.cur_num; i++)
            {
                if(compare_tabu_entry(cur_best_solution.entry, tabu_tbl.entry[i]) == EQUAL)
                {
                    hit_num++;
//                    printf("hit tabu list: %d\n", i);
                }
            }
 
//            printf("cur_best_solution >= best so far, cur: %d, best: %d\n", cur_best_solution.cur_suc_num, best_so_far.cur_suc_num);

            best_so_far = cur_best_solution;
            cur_solution = cur_best_solution;
            tabu_tbl.entry[0] = cur_best_solution.entry;
            if(tabu_tbl.cur_num == 0)
                tabu_tbl.cur_num++;
            
            temp_tabu_tbl_num = tabu_tbl.cur_num;
            for(i = 1; i < tabu_tbl.cur_num; i++)
            {
                if(compare_tabu_entry(cur_solution.entry, tabu_tbl.entry[i]) == EQUAL)
                {
                    i++;
                    temp_tabu_tbl_num--;
                }
                else
                {
                    if(j < i)
                        tabu_tbl.entry[j] = tabu_tbl.entry[i];
                    i++;
                    j++;
                }
            }
            tabu_tbl.cur_num = temp_tabu_tbl_num;
        }
        else
        {
            repeat_num = 0;
            memset(&cur_best_solution, 0, sizeof(struct tabu_sched_solution));
//            printf("start compare, tabu: %d\n", tabu_tbl.cur_num);
            for(i = 0; i < CANDIDATE_NUM; i++)
            {
                compare_flag = UNEQUAL;
                for(j = 0; j < tabu_tbl.cur_num; j++)
                {
                    if(compare_tabu_entry(candidate_set[i].entry, tabu_tbl.entry[j]) == EQUAL)
                    {
                        compare_flag = EQUAL;
                        break;
                    }
                }

                if(compare_flag == EQUAL)
                {
                    hit_num++;
//                    printf("hit tabu list: %d\n", j);
                    continue;
                }
                else
                {
                    if(candidate_set[i].cur_suc_num >= cur_best_solution.cur_suc_num)
                    {
                        cur_best_solution = candidate_set[i];
                    }
                }
            }

            if(cur_best_solution.cur_suc_num > 0)
                cur_solution = cur_best_solution;

//            printf("cur_best_solution < best so far, cur: %d, best: %d\n", cur_best_solution.cur_suc_num, best_so_far.cur_suc_num);
            
            if(tabu_tbl.cur_num >= TABU_TBL_SIZE)
            {
                for(i = 0; i < tabu_tbl.cur_num - 1; i++)
                {
                    tabu_tbl.entry[i] = tabu_tbl.entry[i + 1];
                }
                tabu_tbl.entry[i] = cur_best_solution.entry; 
            }
            else
            {
                tabu_tbl.entry[tabu_tbl.cur_num] = cur_best_solution.entry;
                tabu_tbl.cur_num++;
            }
        }

        loop_num++;
    }
//    printf("%d flows with tabu are sched successfully, hit_num: %d!\n", best_so_far.cur_suc_num, hit_num);
    g_resource = best_so_far.g_resource;
    for(i = 0; i < tsn_sched_set.cur_flow_num; i++)
    {
        tsn_sched_set.sched[i].flag = FAIL;
    }

    for(i = 0; i < best_so_far.cur_suc_num; i++)
    {
        for(j = 0; j < tsn_sched_set.cur_flow_num; j++)
        {
            if(best_so_far.sched_suc[i].flow_id == tsn_sched_set.sched[j].flow_id)
            {
                tsn_sched_set.sched[j] = best_so_far.sched_suc[i];
                break;
            }
        }
    }
    tsn_sched_set.cur_suc_num = best_so_far.cur_suc_num;
}

